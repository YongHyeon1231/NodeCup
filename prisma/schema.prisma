// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum lineUp {
  A
  B
}

enum position {
  forward
  midfielder
  defender
  manager
}

enum positionType {
  player
  manager
}

enum stateType {
  inventory
  formation
  transfer
}

// 스키마 모델링
model Users {
  userId Int @id @default(autoincrement())
  userName String
  email String @unique
  password String
  isGM Boolean @default(false)
  
  club Club? // 1:1 club이 삭제되도 Users는 남게

  @@map("users")
}

model Club {
  clubId Int @id @default(autoincrement())
  userId Int @unique
  clubName String @unique
  gold Int @default(10000)
  cash Int @default(5000)
  MMR Int @default(1000)
  win Int @default(0)
  lose Int @default(0)

  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  formations Formations[]
  cards Card[]

  @@map("club")
}

model Formations {
  formationId Int @id @default(autoincrement())
  userId Int
  clubId Int
  cardEnhancement Int @map("card_enhancement")
  cardName String
  cardNumber Int
  teamTotalStat Int

  // enum
  lineUp lineUp
  position position

  club Club @relation(fields: [clubId], references: [clubId], onDelete: Cascade)

  @@map("formations")
}

model Card {
  cardId Int @id @default(autoincrement())
  userId Int
  clubId Int
  state stateType @default(inventory)
  cardEnhancement Int @default(0) @map("card_enhancement")
  cardNumber Int
  cardCode Int

  cardName String
  speed Int
  shootAccuracy Int @map("shoot_accuracy") // 데이터 cards모델의 열과 연관이 되는 이름
  shootPower Int @map("shoot_power")
  defense Int
  stamina Int
  type positionType

  transfer Transfer?

  club Club @relation(fields: [clubId], references: [clubId], onDelete: Cascade)

  @@map("cards") // 데이터 모델의 Table이름
}

model CardModel {
  cardCode Int @id @default(autoincrement())
  cardName String
  // card_enhancement Int @default(0)
  speed Int
  shootAccuracy Int @map("shoot_accuracy")
  shootPower Int @map("shoot_power")
  defense Int
  stamina Int
  type positionType

  @@map("cardModel")
}

model Transfer{
  transferId Int @id @default(autoincrement())
  cardId Int @unique
  price Int

  cards Card @relation(fields: [cardId], references: [cardId], onDelete: Cascade)

  @@map("transfer")
}